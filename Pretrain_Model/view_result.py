import pandas as pd
import anndata as ad
import scanpy as sc
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Patch
from seaborn import heatmap, lineplot, clustermap

add_scNOGraph_train = [0, 0.4471652992037429, 0.46738364122117887, 0.45214553927069046, 0.6782481418231995, 0.6771045665844, 0.6649779265154028, 0.6617097891398623, 0.66698848128524, 0.6719161161865163, 0.6941126374617997, 0.6745794116620458, 0.503062563252567, 0.6923110420374617, 0.6763351202198029, 0.6466956251818727, 0.627664840579193, 0.6107562725889206, 0.6586031181120644, 0.6506135864054217, 0.6634086575292695, 0.6574900261490405, 0.6428598577168435, 0.6565573297228045, 0.6575344205840544, 0.6640867233976171, 0.6609770429327594, 0.6536169901182013, 0.5958458769401789, 0.6415027568463689, 0.6658732066355156, 0.6478464529278833, 0.6460209904324006, 0.6130116302863726, 0.63461480961189, 0.6467100736212578, 0.6466133504814957, 0.6503312554066011, 0.6397708721360655, 0.6320260403277845, 0.623874944018846, 0.7660678006634585, 0.6671273925729302, 0.6641431951918089, 0.6548334803755104, 0.6799799615203084, 0.6584692496963981, 0.7716142140416715, 0.6667640436455332, 0.665800995112533]
add_scNOGraph_val = [0, 0.4452019778668732, 0.4353680104938949, 0.43042205828070673, 0.43269670324762993, 0.4358102689310519, 0.4294381281947397, 0.42965476846400485, 0.4634317917192844, 0.4315063846877312, 0.43745213884746204, 0.4610772080882397, 0.42874056527146936, 0.4249248824934309, 0.41091953928317926, 0.4277719486537394, 0.5613380586055261, 0.5959976238655202, 0.6076945921656256, 0.5728278726609891, 0.5730637760599739, 0.6144390859203891, 0.5749048059553262, 0.5715931874311112, 0.6101620565678769, 0.6216681204158632, 0.5720275304185216, 0.6222444915491497, 0.5698012763135891, 0.6227813636020557, 0.5604812534532421, 0.6148716901436821, 0.5613571089486558, 0.5678643340493497, 0.6269302052768015, 0.5756758369226722, 0.5831899491968466, 0.6174829599644727, 0.5754563984358236, 0.5818141158860212, 0.5622860270179479, 0.6255625549114529, 0.5739207208995154, 0.582899220186911, 0.5819462688818763, 0.5749610273665909, 0.5765373304041537, 0.5749871809982751, 0.5782863653599343, 0.5814627027930909]

scETM_6000cell_2000gene_train_mini = [0.0, 0.31414734597376726, 0.38657788933635473, 0.40052570010083594, 0.4023066652364854, 0.4104228237134488, 0.41415591202792496, 0.46751353109472793, 0.4675759736249201, 0.46706378588857245, 0.46706378588857245, 0.4814652185436172, 0.4814652185436172, 0.4658637527292721, 0.47337822361793286, 0.4725028763732321, 0.4719628390927013, 0.4719628390927013, 0.5956568822517407, 0.598418447938079, 0.5652661428738563, 0.5939499002910859, 0.5033954535551677, 0.633469461389059, 0.5223608380776852, 0.5234466661089688, 0.5244725438994347, 0.5239935658361842, 0.5246780749743225, 0.6344823648955452, 0.6351600942727511, 0.6370363984569873, 0.6365153958206838, 0.6346465286305042, 0.6356644356634706, 0.6368144081519531, 0.6381095164308472, 0.638654010092803, 0.6401901056475373, 0.6437743533344614, 0.618482802088491, 0.6209539169591417, 0.6437547828447903, 0.6227021077728623, 0.636808340734357, 0.6230902602548246, 0.6439564298186612, 0.6445336661309043, 0.6441691332531511, 0.644147841228355]
scETM_6000cell_2000gene_test_mini = [0.0, 0.2466701674501963, 0.3997203102959462, 0.4170693364010093, 0.4419175643959694, 0.4135263104502202, 0.4452136834303421, 0.4446420791791192, 0.4446420791791192, 0.44253629505579256, 0.44571862614348406, 0.4479284689062094, 0.4479284689062094, 0.4298483884860668, 0.4298483884860668, 0.4298483884860668, 0.43036531978189707, 0.4363184739230866, 0.4266571763176026, 0.45352346263831556, 0.5775419406745798, 0.4690698693020732, 0.4820771347947632, 0.5659106473453063, 0.530127139078625, 0.5141404414899134, 0.610692902212007, 0.6168258690093662, 0.5845740103955853, 0.6155692599643384, 0.5413679770306807, 0.6177715982125253, 0.5413679770306807, 0.5128653909754913, 0.5417775922071539, 0.5449181523830746, 0.5410987868539923, 0.6494556683219809, 0.5744350490759528, 0.6414465354251637, 0.5007832494117149, 0.5344371689534023, 0.490062922941257, 0.49887456163313987, 0.6070970541272744, 0.6288177360455559, 0.6112095186470443, 0.6197979096649632, 0.5712259231448922, 0.5842661280715247]
scETM_6000cell_2000peak_train_mini= [0.0, 0.2993242887717194, 0.2706540031293688, 0.26927149319527033, 0.3382626886258477, 0.3288369595193215, 0.3525463991868213, 0.2815068617404372, 0.33380516642919117, 0.2945624652187905, 0.2745978698644217, 0.23784063740904604, 0.2304714049958257, 0.24503753137669862, 0.22811123145791698, 0.23955043581420388, 0.23338665862755295, 0.24253973451021194, 0.23832522061450237, 0.24130800833999436, 0.26647974492209076, 0.25143478503578676, 0.2596073299856392, 0.2798594589881316, 0.3046476079931578, 0.32468159238941074, 0.3204535593626618, 0.36208466263363254, 0.3333612599010755, 0.3516444855256798, 0.39119935624055874, 0.3904632727626123, 0.4173141142723931, 0.4083987490580173, 0.38638512239383394, 0.36248104205511256, 0.4120025463978952, 0.4110075189939994, 0.40185502142271334, 0.40734820771256064, 0.40050522684315576, 0.4176395256275401, 0.39571950733750666, 0.43774188811486403, 0.3931141157862146, 0.40865750856638233, 0.4246825509275776, 0.39710826170648034, 0.4091324289887178, 0.41205834755930254]
scETM_6000cell_2000peak_test_mini = [0.0, 0.3024300453189216, 0.2316170474624901, 0.324622095065724, 0.3065137977398749, 0.34139148717885737, 0.32204288298934897, 0.43423276808678624, 0.4357905094636589, 0.3013690629267545, 0.30928979000381573, 0.3257702894573194, 0.280705027469629, 0.284836778788588, 0.31325115893930344, 0.274821106364923, 0.31376988997439925, 0.281243819834698, 0.3464173929470351, 0.2845352440349272, 0.32202607857228316, 0.3284577567499799, 0.3232596834944636, 0.3552924549973342, 0.31228559949804124, 0.2910637258190125, 0.35452616305493934, 0.3841106813717804, 0.40433845860358314, 0.40201658240560967, 0.40391089341165504, 0.3849761418101794, 0.4372056299480134, 0.43992643886100763, 0.42887315214648225, 0.4161345850308847, 0.4393262435727875, 0.4117263539637767, 0.3863270930606784, 0.39487356849112226, 0.5002045396566958, 0.4395646616278123, 0.49999174743750957, 0.4141048143944047, 0.4134428217079597, 0.41428607333721845, 0.4139772376063573, 0.44534701770667146, 0.4301444929347529, 0.4294640186176285]

pog_scGraph_train = [0, 0.3963895249261393, 0.5692812250266489, 0.5816234038192667, 0.5465986845205637, 0.5600928784254323, 0.5539552535405852, 0.5632470027098141, 0.5286303531394945, 0.6718702007681818, 0.617018304059587, 0.5450142356737685, 0.5366672983952581, 0.740718431075323, 0.712644594825068, 0.7973401580860572, 0.7965019441444814, 0.7851063433515233, 0.7904079466318068, 0.7978840888666531, 0.7714809116453035, 0.8067233811684081, 0.7674771678142084, 0.7747260558992131, 0.6169500512803218, 0.660161606032851, 0.8105873197811476, 0.8205891336534789, 0.8089896886296193, 0.8052162333402816, 0.7867163296269633, 0.61575873888039, 0.7652768756667572, 0.758578974318431, 0.7913118480775122, 0.7132463451109377, 0.7604257459387511, 0.8016976679152794, 0.8105590370318227, 0.7362519131656347, 0.6699197224620966, 0.7635069788381564, 0.7245020437502464, 0.6843143288688555, 0.7723077210703206, 0.8155895194428715, 0.7797966837118302, 0.8043530369311616, 0.7204036486580512, 0.6294116739139448]
pog_scGraph_val = [0, 0.4625488047638598, 0.5699187193904477, 0.6358236276476082, 0.5783241231483257, 0.5843104360108792, 0.5999634312445136, 0.6501583795091328, 0.6595309231169892, 0.5981230644108604, 0.650641982000063, 0.6333901153148735, 0.6022713084803749, 0.567518816629908, 0.568513782555149, 0.6120195356380056, 0.7129045293893224, 0.7116761175453276, 0.6581799462497067, 0.6593267488448283, 0.7258199725933361, 0.6889411289307861, 0.6521233088938617, 0.653450280469986, 0.6788516824259512, 0.6946572348365267, 0.660059308934208, 0.6795335235861628, 0.6825386234945707, 0.6713566990445878, 0.6744163040720897, 0.6670869784589245, 0.6710404860324833, 0.6592229312527211, 0.6620369028325588, 0.6548573482277242, 0.6611838978781177, 0.6773074432056888, 0.676529138243447, 0.6623455181539665, 0.6797250107671454, 0.6574391861461258, 0.6824745847027628, 0.6480208929074655, 0.683070938583045, 0.6911289171878527, 0.6693744441447534, 0.6806551945759405, 0.6339135623696192, 0.6701595328475473]
add_scGraph_train = [0, 0.4324899837056724, 0.41216515299907436, 0.42111458326124834, 0.552445358271872, 0.562688145681125, 0.7630792273162397, 0.6384686951502323, 0.7731359088790523, 0.768004668764388, 0.7624123537851817, 0.7621023049089442, 0.7588194705758708, 0.6913996219234513, 0.6516151584942408, 0.7999254163933702, 0.6146951463555688, 0.6039267423763098, 0.6151596472402135, 0.6193987720569882, 0.6054318107942612, 0.5815983019975036, 0.5849516056470309, 0.6301425435683394, 0.533530237322776, 0.6284686101856929, 0.6287928914978479, 0.6484872642841365, 0.592423517645558, 0.5918207298024071, 0.5926214451674876, 0.5909366282807811, 0.5922464202368356, 0.5803496297979118, 0.5405274706503372, 0.5957768334080773, 0.6095586191784181, 0.5720939126528168, 0.6192161530446224, 0.5746568089503414, 0.608732256921503, 0.6134901643887934, 0.5564300294350133, 0.6082084962331504, 0.6153224383942599, 0.6280250461115142, 0.6181764410640673, 0.629578079292104, 0.7809107187690351, 0.5650216656921367]
add_scGraph_val = [0, 0.38324931829139874, 0.44036617650607024, 0.4066241835928056, 0.400493632212592, 0.5621380943619768, 0.5476120432402786, 0.5734353183604529, 0.6821807393541632, 0.5905489407627644, 0.7480319583468602, 0.5701093722177556, 0.6842071247121434, 0.6607427109383012, 0.6868159076770854, 0.5592514096072098, 0.5761343206872618, 0.6136735741676873, 0.5646517732687459, 0.5761600243688869, 0.5620593207981731, 0.5659457041546889, 0.5656277787493211, 0.5558055452612866, 0.556555209883478, 0.5674417239765734, 0.7405562577011464, 0.5551054837127175, 0.5618918560965431, 0.73471748896381, 0.5704969909852456, 0.4479009885790681, 0.48328852292615376, 0.482624506362871, 0.5648603622376724, 0.5327354888470908, 0.5546527050296406, 0.5415927566775635, 0.5509340700963271, 0.5578891824011517, 0.6149396389039812, 0.6682364974874972, 0.570920865673295, 0.7350982577456717, 0.5910397740695813, 0.7514001789720004, 0.7297126364809656, 0.5446523825861567, 0.6310435930362255, 0.6645148069262468]

# ======= FUll Batch =================
# 2000 peak
add_scNOGraph_train_full = [0, 0, 0.3148458489137874, 0.45326727923599236, 0.4576942998027049, 0.4634786773986832, 0.4497705173841469, 0.4793801866998882, 0.5017646946534492, 0.5815279243506576, 0.6741452520482247, 0.6887546365615456, 0.7804343421351061, 0.6584300358914295, 0.6561232224933031, 0.6402779614199376, 0.6567608109746998, 0.7981617219920039, 0.8037697388055463, 0.7914167731780735, 0.8016583577041104, 0.8080410854011435, 0.8027444852368383, 0.6801752675955689, 0.7843404567991257, 0.7810408647518127, 0.7888126516362883, 0.7354324652042239, 0.7325989938641226, 0.7182503443998529, 0.7741012503997999, 0.7700830286694922, 0.7576608067527328, 0.7843388008952777, 0.7186608354302136, 0.7775609243386582, 0.7780153974711944, 0.7792570445633659, 0.7815581826867484, 0.7875336185102919, 0.6705899058034983, 0.7698476822864719, 0.7145579160326182, 0.7786900848190844, 0.6285914273670588, 0.7679610551030137, 0.7582568805616695, 0.7775903352278462, 0.7754035635991601, 0.7805431058283219]
add_scNOGraph_val_full = [0, 0, 0.2207586947611355, 0.44301147789871015, 0.451537025835779, 0.4402639245659787, 0.44087789198410243, 0.45231732430298166, 0.44998019868405376, 0.4456327887155411, 0.4446650598736593, 0.49140032892152374, 0.5863840957358152, 0.595209249510267, 0.4410829856966213, 0.5941242232063465, 0.5936363921308953, 0.6319656094683365, 0.5741281837983485, 0.6762701957141535, 0.6627925759230355, 0.5719536780860821, 0.5824397308842969, 0.591887975788251, 0.6774099220890549, 0.5788349568917434, 0.6726708408766662, 0.5805410839994385, 0.5888020720048499, 0.6728811380004652, 0.6704003122315978, 0.5914351377022529, 0.6974461497460787, 0.5941352018787442, 0.600274407914266, 0.5993941488716853, 0.6003444296591893, 0.6298341068681481, 0.6776707021783223, 0.5909235681090704, 0.5871898951674592, 0.5948438076321083, 0.674398534903978, 0.6421410452364815, 0.592872098290837, 0.5927769801497182, 0.5947475065984987, 0.5862402748732746, 0.6796035532820625, 0.5866228876849925]

scETM_6000cell_2000gene_train_full = [0.0, 0.3086432642395809, 0.28712812212972066, 0.2999726531374064, 0.383714057523864, 0.4584909281623235, 0.42142510311615256, 0.5045388488249575, 0.6345473550248509, 0.6471376469937331, 0.6382628957022517, 0.5929688670711563, 0.5874352037586229, 0.603934557274888, 0.6147329980797395, 0.6380095405726082, 0.6117954006835293, 0.6398542175824448, 0.6699740521377451, 0.6480965819230847]
scETM_6000cell_2000gene_test_full= [0.0, 0.2971217896248373, 0.3609415928435353, 0.2668818526176736, 0.37132523106237075, 0.45296255888770937, 0.45403361795879754, 0.4956875613158695, 0.6039998940553692, 0.6129686622604158, 0.6083606427968098, 0.6159335724235159, 0.6095136211086983, 0.6354611150116266, 0.6145131287594937, 0.6322520004303552, 0.6320944691616095, 0.618295574299648, 0.6299281933111258, 0.6283873083144214]
scETM_6000cell_2000peak_train_full = [0.0, 0.188327190121628, 0.22657154958658476, 0.3295804714212019, 0.47663736937142, 0.40430464853234305, 0.373038745841328, 0.37823582916942383, 0.37765657531752, 0.3743804190444264, 0.3701937338359224, 0.41672158845671464, 0.36708349868386814, 0.3603116283201222, 0.39107168298754114, 0.440635201818073, 0.38978049381747565, 0.4178175968653511, 0.3765168260649588, 0.42323871519575457]
scETM_6000cell_2000peak_test_full = [0.0, 0.22638962093298917, 0.2677246941546722, 0.3738287168712232, 0.47658875952020013, 0.4545925458244934, 0.38868269952283185, 0.36204305185864205, 0.3865808048334648, 0.45127512693034555, 0.4742473291511669, 0.47971465375811934, 0.45913848467073365, 0.48021885613022197, 0.4185402368269258, 0.4483358391176356, 0.42277418827613933, 0.47040215722044526, 0.43802043142650926, 0.43897325222808775]


def generate_clustermap(theta, sc_adata, plot_path_rel, title):
    adata = ad.AnnData(np.array(theta.detach().cpu()))
    labels = sc_adata.obs['Celltype']
    adata.obs["Celltype"] = pd.Categorical(list(labels))
    sc.tl.tsne(adata, use_rep='X')
    # sc.pl.tsne(adata, color=adata.obs)
    fig1 = sc.pl.tsne(adata, color="Celltype", show=False, return_fig=True)
    fig1.savefig(plot_path_rel + 'tsne_' + title + '.png')

    sc.pp.neighbors(adata)
    sc.tl.louvain(adata, resolution=0.5)
    sc.tl.umap(adata, spread=1.0, min_dist=0.4)

    fig2 = sc.pl.umap(adata, color="louvain", title="louvain_0.5", show=False, return_fig=True)
    fig2.savefig(plot_path_rel + 'louvain_' + title + '.png')

    fig3 = sc.pl.umap(adata, color="Celltype", title="Celltype", show=False, return_fig=True)
    fig3.savefig(plot_path_rel + 'umap_' + title + '.png')


def generate_gene_heatmap(num_of_topics, sc_adata, beta, num_of_modality, path, title):
    K = 5
    top_features = np.zeros((K * num_of_topics, num_of_topics))
    select = []
    genes = list(sc_adata.var["gene_name"][:num_of_modality])

    beta_T = beta.detach().cpu().numpy()
    # print(beta_T.shape)
    top5 = []
    for i in range(num_of_topics):
        top5.append(np.flip(np.concatenate((np.array(beta_T)[i, :].argsort()[-5:], select)), axis=0))

    # print(np.array(top5).shape)
    geneNames = []
    count = 0
    for i in range(num_of_topics):
        for j in range(K):
            top_features[count][i] = np.array(beta_T)[i][int(top5[i][j])]
            geneNames.append(genes[int(top5[i][j])])
            count += 1

    plt.figure(figsize=(8, 16))
    hmp = heatmap(top_features, cmap='RdBu_r', vmax=0.03, center=0,
                  xticklabels=[item for item in range(0, num_of_topics)], yticklabels=geneNames)
    plt.savefig(path + 'gene_heatmap_' + title + '.png')


def generate_cell_heatmap(sc_adata, theta, num_of_cell, path, title):
    cell_type = sc_adata.obs["cell_type"][:num_of_cell]
    lut = dict(zip(cell_type.unique(), ['red',
                                        '#00FF00',
                                        '#0000FF',
                                        '#FFFF00',
                                        '#FF00FF',
                                        '#00FFFF',
                                        '#FFA500',
                                        '#800080',
                                        '#FFC0CB',
                                        '#FF69B4',
                                        '#00FF7F',
                                        '#FFD700',
                                        '#1E90FF',
                                        '#2F4F4F',
                                        '#808000',
                                        '#FF8C00',
                                        '#8B0000',
                                        '#4B0082',
                                        '#2E8B57',
                                        '#FF1493',
                                        '#6B8E23',
                                        '#48D1CC',
                                        '#B22222',
                                        '#DC143C',
                                        '#008080']))
    row_colors = cell_type.map(lut)
    data = [row_colors[i] for i in range(len(row_colors))]
    row_colors = pd.Series(data)
    theta_T = (theta.detach().cpu().numpy())
    clustermap(pd.DataFrame(theta_T), center=0, cmap="RdBu_r", row_colors=row_colors)

    from matplotlib.patches import Patch

    handles = [Patch(facecolor=lut[name]) for name in lut]
    plt.legend(handles, lut, title='Cell Types',
               bbox_to_anchor=(1, 1), bbox_transform=plt.gcf().transFigure, loc='upper right')
    plt.savefig(path + 'cell_heatmap' + title + '.png')


def ari_plot(train_ari_list, test_ari_list, path, title):
    # train_ari_gene_list, train_ari_peak_list
    plt.plot(train_ari_list, label='Train ARI')
    plt.plot(test_ari_list, label='Validation ARI')

    plt.xlabel('Epoch')
    plt.ylabel('ARI')
    plt.title('ARI_' + title)

    # Adding a legend
    plt.legend()
    plt.ylim(0, 1)
    plt.savefig(path + 'ari_' + title + '.png')


def ari_plot2(train_ari_list, test_ari_list, train_ari_gene_list, train_ari_peak_list, path, title):
    # train_ari_gene_list, train_ari_peak_list
    plt.plot(train_ari_list, label='Train ARI')
    plt.plot(test_ari_list, label='Validation ARI')

    plt.plot(train_ari_gene_list, label='RNA ARI', color='red')
    plt.plot(train_ari_peak_list, label='ATAC ARI', color='black')

    # Annotating each point with its value
    max1 = max(train_ari_list)
    for i, j in enumerate(train_ari_list):
        if j == max1:
            plt.annotate(str(round(j, 4)), xy=(i, j), xytext=(0, 10), textcoords='offset points', ha='center')

    max2 = max(test_ari_list)
    for i, j in enumerate(test_ari_list):
        if j == max2:
            plt.annotate(str(round(j, 4)), xy=(i, j), xytext=(0, 10), textcoords='offset points', ha='center')

    max3 = max(train_ari_gene_list)
    for i, j in enumerate(train_ari_gene_list):
        if j == max3:
            plt.annotate(str(round(j, 4)), xy=(i, j), xytext=(0, 10), textcoords='offset points', ha='center')

    max4 = max(train_ari_peak_list)
    for i, j in enumerate(train_ari_peak_list):
        if j == max4:
            plt.annotate(str(round(j, 4)), xy=(i, j), xytext=(0, 10), textcoords='offset points', ha='center')
    # Adding labels and title to the plot
    plt.xlabel('Epoch')
    plt.ylabel('ARI')
    plt.title('ARI_' + title)

    # Adding a legend
    plt.legend()
    plt.ylim(0, 1)
    plt.savefig(path + 'ari_' + title + '.png')


def loss_plot(train_loss_list, test_loss_list, path, title):
    plt.plot(train_loss_list, label='Train Loss')
    plt.plot(test_loss_list, label='Validation Loss')

    # Adding labels and title to the plot
    plt.xlabel('Epoch_Per_Frequency')
    plt.ylabel('Loss')
    plt.title('Train and Validation Loss_' + title)

    # Adding a legend
    plt.legend()
    plt.savefig(path + 'Loss_' + title + '.png')

if __name__ == "__main__":
    path = './plot2/'
    plt.plot(add_scGraph_train, label='scGraph_ADD_Train',  color='darkred')
    plt.plot(add_scGraph_val, label='scGraph_ADD_Val', color='pink')
    # plt.plot(pog_scGraph_train, label='scGraph_POG')

    plt.plot(add_scNOGraph_train, label='scNoGraph_ADD_Train', color='darkblue')
    plt.plot(add_scNOGraph_val, label='scNoGraph_ADD_Val',  color='skyblue')
    # plt.plot(pog_scGraph_train, label='scGraph_POG')

    # plt.plot(scETM_6000cell_2000gene_train_mini, label='scETM_RNA', color='red')
    # plt.plot(scETM_6000cell_2000peak_train_mini, label='scETM_ATAC', color='black')


    plt.xlabel('Epoch')
    plt.ylabel('ARI')
    title = "Training and Validating ARI Comparison: Graph vs No Graph"
    plt.title(title)

    # Adding a legend
    plt.legend()
    plt.ylim(0, 1)
    plt.savefig(path + title + '.png')

